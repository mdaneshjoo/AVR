
T1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e6  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000546  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000017c  00000000  00000000  00000ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ef  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a0  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	DDRA=0b11111111;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	int n=255;
  70:	4f ef       	ldi	r20, 0xFF	; 255
  72:	50 e0       	ldi	r21, 0x00	; 0
  74:	28 e0       	ldi	r18, 0x08	; 8
  76:	30 e0       	ldi	r19, 0x00	; 0
    /* Replace with your application code */
    while (1) 
    {
		for (int i=0;i<8;i++)
		{
			PORTA=n;
  78:	4b bb       	out	0x1b, r20	; 27
			n=n<<1;
  7a:	44 0f       	add	r20, r20
  7c:	55 1f       	adc	r21, r21
  7e:	80 ea       	ldi	r24, 0xA0	; 160
  80:	96 e8       	ldi	r25, 0x86	; 134
  82:	a1 e0       	ldi	r26, 0x01	; 1
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	a1 09       	sbc	r26, r1
  8a:	b1 09       	sbc	r27, r1
			for (long d=0;d<100000;d++)
  8c:	e1 f7       	brne	.-8      	; 0x86 <main+0x1a>
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	31 09       	sbc	r19, r1
	
	
    /* Replace with your application code */
    while (1) 
    {
		for (int i=0;i<8;i++)
  92:	81 f3       	breq	.-32     	; 0x74 <main+0x8>
  94:	f1 cf       	rjmp	.-30     	; 0x78 <main+0xc>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
