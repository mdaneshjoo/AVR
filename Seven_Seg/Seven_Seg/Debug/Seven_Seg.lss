
Seven_Seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00000104  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060d  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000585  00000000  00000000  00000825  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a2  00000000  00000000  00000daa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000f4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000330  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000137b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
 */ 

#include <avr/io.h>

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	64 97       	sbiw	r28, 0x14	; 20
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
    int numbers[] = {0b01000000,0b01111001,0b00100100,0b00110000,0b00011001,0b0010010,0b00000010,0b01111000,0b00000000,0b00010000};
  96:	84 e1       	ldi	r24, 0x14	; 20
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	DDRC = 0xFF; 
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	84 bb       	out	0x14, r24	; 20
	
	int i ;
	bool pause = false ;  
  ac:	80 e0       	ldi	r24, 0x00	; 0
    {
		if((PINA & 0b00000001 ) >0)
		{
			pause = true; 
		}
		if((PINA & 0b00000010 ) >0)
  ae:	51 e0       	ldi	r21, 0x01	; 1
  b0:	40 e0       	ldi	r20, 0x00	; 0
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x34>
  b4:	84 2f       	mov	r24, r20
	
	int i ;
	bool pause = false ;  
    while (1) 
    {
		if((PINA & 0b00000001 ) >0)
  b6:	c8 99       	sbic	0x19, 0	; 25
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <main+0x76>
		{
			pause = true; 
		}
		if((PINA & 0b00000010 ) >0)
  ba:	c9 99       	sbic	0x19, 1	; 25
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <main+0x40>
		{
			pause = false;
		}
		if(pause)
  be:	81 11       	cpse	r24, r1
  c0:	fa cf       	rjmp	.-12     	; 0xb6 <main+0x34>
		{
			continue;
		}
		if(i > 9 )
  c2:	2a 30       	cpi	r18, 0x0A	; 10
  c4:	31 05       	cpc	r19, r1
  c6:	14 f0       	brlt	.+4      	; 0xcc <main+0x4a>
			i=0 ; 
  c8:	20 e0       	ldi	r18, 0x00	; 0
  ca:	30 e0       	ldi	r19, 0x00	; 0
		PORTC = numbers[i];
  cc:	f9 01       	movw	r30, r18
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	8c 0f       	add	r24, r28
  d8:	9d 1f       	adc	r25, r29
  da:	e8 0f       	add	r30, r24
  dc:	f9 1f       	adc	r31, r25
  de:	80 81       	ld	r24, Z
  e0:	85 bb       	out	0x15, r24	; 21
		i++;
  e2:	2f 5f       	subi	r18, 0xFF	; 255
  e4:	3f 4f       	sbci	r19, 0xFF	; 255
  e6:	80 ea       	ldi	r24, 0xA0	; 160
  e8:	96 e8       	ldi	r25, 0x86	; 134
  ea:	a1 e0       	ldi	r26, 0x01	; 1
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	a1 09       	sbc	r26, r1
  f2:	b1 09       	sbc	r27, r1
		for(long d = 0 ; d < 100000 ; d++);
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x6c>
  f6:	de cf       	rjmp	.-68     	; 0xb4 <main+0x32>
    {
		if((PINA & 0b00000001 ) >0)
		{
			pause = true; 
		}
		if((PINA & 0b00000010 ) >0)
  f8:	c9 99       	sbic	0x19, 1	; 25
  fa:	e3 cf       	rjmp	.-58     	; 0xc2 <main+0x40>
  fc:	85 2f       	mov	r24, r21
  fe:	db cf       	rjmp	.-74     	; 0xb6 <main+0x34>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
