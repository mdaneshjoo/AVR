
T6_B.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000010e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000010e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000140  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005fc  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055c  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001a6  00000000  00000000  00000cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000315  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a6  00000000  00000000  000011d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  0000127b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
	DDRC=0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	while (1)
	{
		int down=9;
		int up=15;
		
		for (int i=0;i<153;i++)// 16
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	30 e0       	ldi	r19, 0x00	; 0
	DDRC=0xFF;
	/* Replace with your application code */
	while (1)
	{
		int down=9;
		int up=15;
  74:	6f e0       	ldi	r22, 0x0F	; 15
  76:	70 e0       	ldi	r23, 0x00	; 0
{
	DDRC=0xFF;
	/* Replace with your application code */
	while (1)
	{
		int down=9;
  78:	49 e0       	ldi	r20, 0x09	; 9
  7a:	50 e0       	ldi	r21, 0x00	; 0
		int up=15;
		
		for (int i=0;i<153;i++)// 16
		{
			
			if (i>down&&i<=up)
  7c:	42 17       	cp	r20, r18
  7e:	53 07       	cpc	r21, r19
  80:	5c f4       	brge	.+22     	; 0x98 <main+0x2c>
  82:	62 17       	cp	r22, r18
  84:	73 07       	cpc	r23, r19
  86:	44 f0       	brlt	.+16     	; 0x98 <main+0x2c>
			{
				if (i==up)
  88:	62 17       	cp	r22, r18
  8a:	73 07       	cpc	r23, r19
  8c:	71 f4       	brne	.+28     	; 0xaa <main+0x3e>
				{
					
					up+=16;
  8e:	60 5f       	subi	r22, 0xF0	; 240
  90:	7f 4f       	sbci	r23, 0xFF	; 255
					down+=16;
  92:	40 5f       	subi	r20, 0xF0	; 240
  94:	5f 4f       	sbci	r21, 0xFF	; 255
  96:	09 c0       	rjmp	.+18     	; 0xaa <main+0x3e>
				}
				continue;
			}
			
			
			PORTC=i;
  98:	25 bb       	out	0x15, r18	; 21
  9a:	80 ea       	ldi	r24, 0xA0	; 160
  9c:	96 e8       	ldi	r25, 0x86	; 134
  9e:	a1 e0       	ldi	r26, 0x01	; 1
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	a1 09       	sbc	r26, r1
  a6:	b1 09       	sbc	r27, r1
			
			
			for (long d=0;d<100000;d++){}
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
	while (1)
	{
		int down=9;
		int up=15;
		
		for (int i=0;i<153;i++)// 16
  aa:	2f 5f       	subi	r18, 0xFF	; 255
  ac:	3f 4f       	sbci	r19, 0xFF	; 255
  ae:	29 39       	cpi	r18, 0x99	; 153
  b0:	31 05       	cpc	r19, r1
  b2:	f1 f2       	breq	.-68     	; 0x70 <main+0x4>
  b4:	e3 cf       	rjmp	.-58     	; 0x7c <main+0x10>

000000b6 <_exit>:
  b6:	f8 94       	cli

000000b8 <__stop_program>:
  b8:	ff cf       	rjmp	.-2      	; 0xb8 <__stop_program>
