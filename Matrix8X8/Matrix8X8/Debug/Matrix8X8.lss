
Matrix8X8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005e1  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000054e  00000000  00000000  000007b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f0  00000000  00000000  00000d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000ef4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000326  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005d  00000000  00000000  0000123e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000129b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>


int main(void)
{
    DDRC = 0b11111111; 
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111; 
  70:	81 bb       	out	0x11, r24	; 17
	
	
	PORTC = 0b00000001; // y start point
  72:	81 e0       	ldi	r24, 0x01	; 1
  74:	85 bb       	out	0x15, r24	; 21
	PORTD = 0b11110111;	// x start point 
  76:	87 ef       	ldi	r24, 0xF7	; 247
  78:	82 bb       	out	0x12, r24	; 18
	long d ;
	bool goUp = false ;  // ball goes up or down ? 
	bool goRight = false ; // ball goes left or right ? 
  7a:	30 e0       	ldi	r19, 0x00	; 0
	
	
	PORTC = 0b00000001; // y start point
	PORTD = 0b11110111;	// x start point 
	long d ;
	bool goUp = false ;  // ball goes up or down ? 
  7c:	20 e0       	ldi	r18, 0x00	; 0
		{
			PORTD = PORTD << 1 ; // shift to left 
			PORTD = PORTD + 1 ;  // add with 1 to add 1 from right 
		}
		if(PORTC == 0b10000000  )// if reach the bottom of panel go up 
			goUp=true; 
  7e:	51 e0       	ldi	r21, 0x01	; 1
		else if(PORTC == 0b00000001)//same thing but reverse
			goUp = false ;
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	01 c0       	rjmp	.+2      	; 0x86 <main+0x1a>

		if(PORTD == 0b11111110 )//if reach the left side of panel go right 
			goRight = true ; 
  84:	35 2f       	mov	r19, r21
	
	
	PORTC = 0b00000001; // y start point
	PORTD = 0b11110111;	// x start point 
	long d ;
	bool goUp = false ;  // ball goes up or down ? 
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	01 96       	adiw	r24, 0x01	; 1
	bool goRight = false ; // ball goes left or right ? 
	while(1)
	{
		for(d = 0 ; d < 20000 ; d++);
  8c:	80 32       	cpi	r24, 0x20	; 32
  8e:	6e e4       	ldi	r22, 0x4E	; 78
  90:	96 07       	cpc	r25, r22
  92:	d9 f7       	brne	.-10     	; 0x8a <main+0x1e>
		if(!goUp)
  94:	21 11       	cpse	r18, r1
  96:	04 c0       	rjmp	.+8      	; 0xa0 <main+0x34>
		{
			PORTC = PORTC << 1 ;	
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	88 0f       	add	r24, r24
  9c:	85 bb       	out	0x15, r24	; 21
  9e:	05 c0       	rjmp	.+10     	; 0xaa <main+0x3e>
		}else
			PORTC = PORTC >> 1 ;
  a0:	85 b3       	in	r24, 0x15	; 21
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	95 95       	asr	r25
  a6:	87 95       	ror	r24
  a8:	85 bb       	out	0x15, r24	; 21
		if(!goRight)
  aa:	31 11       	cpse	r19, r1
  ac:	09 c0       	rjmp	.+18     	; 0xc0 <main+0x54>
		{
			PORTD = PORTD >> 1 ; // shift to right 
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	95 95       	asr	r25
  b4:	87 95       	ror	r24
  b6:	82 bb       	out	0x12, r24	; 18
			PORTD = PORTD + 0b10000000 ; // add with 128 to add binary 1 from left 
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	80 58       	subi	r24, 0x80	; 128
  bc:	82 bb       	out	0x12, r24	; 18
  be:	06 c0       	rjmp	.+12     	; 0xcc <main+0x60>
		}
		else 
		{
			PORTD = PORTD << 1 ; // shift to left 
  c0:	82 b3       	in	r24, 0x12	; 18
  c2:	88 0f       	add	r24, r24
  c4:	82 bb       	out	0x12, r24	; 18
			PORTD = PORTD + 1 ;  // add with 1 to add 1 from right 
  c6:	82 b3       	in	r24, 0x12	; 18
  c8:	8f 5f       	subi	r24, 0xFF	; 255
  ca:	82 bb       	out	0x12, r24	; 18
		}
		if(PORTC == 0b10000000  )// if reach the bottom of panel go up 
  cc:	85 b3       	in	r24, 0x15	; 21
  ce:	80 38       	cpi	r24, 0x80	; 128
  d0:	29 f0       	breq	.+10     	; 0xdc <main+0x70>
			goUp=true; 
		else if(PORTC == 0b00000001)//same thing but reverse
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	19 f4       	brne	.+6      	; 0xde <main+0x72>
			goUp = false ;
  d8:	24 2f       	mov	r18, r20
  da:	01 c0       	rjmp	.+2      	; 0xde <main+0x72>
		{
			PORTD = PORTD << 1 ; // shift to left 
			PORTD = PORTD + 1 ;  // add with 1 to add 1 from right 
		}
		if(PORTC == 0b10000000  )// if reach the bottom of panel go up 
			goUp=true; 
  dc:	25 2f       	mov	r18, r21
		else if(PORTC == 0b00000001)//same thing but reverse
			goUp = false ;

		if(PORTD == 0b11111110 )//if reach the left side of panel go right 
  de:	82 b3       	in	r24, 0x12	; 18
  e0:	8e 3f       	cpi	r24, 0xFE	; 254
  e2:	81 f2       	breq	.-96     	; 0x84 <main+0x18>
			goRight = true ; 
		else if(PORTD == 0b01111111)
  e4:	82 b3       	in	r24, 0x12	; 18
  e6:	8f 37       	cpi	r24, 0x7F	; 127
  e8:	71 f6       	brne	.-100    	; 0x86 <main+0x1a>
			goRight = false ; 
  ea:	34 2f       	mov	r19, r20
  ec:	cc cf       	rjmp	.-104    	; 0x86 <main+0x1a>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
