
LED_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000124  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000190  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062e  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000551  00000000  00000000  000007de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ca  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000efc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000030c  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  0000122c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 66 00 	jmp	0xcc	; 0xcc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
    /* Replace with your application code */
	
	while(1){
	DDRA = 0b00011111; 
  6c:	7f e1       	ldi	r23, 0x1F	; 31
	PORTA = 0b00000001;
  6e:	61 e0       	ldi	r22, 0x01	; 1
	
	for(long i = 0 ; i < 10000 ; i++);
	
	PORTA = 0b00000010; 
  70:	52 e0       	ldi	r21, 0x02	; 2
	
	for(long i = 0 ; i < 10000 ; i++);
	
	PORTA = 0b00000100;
  72:	44 e0       	ldi	r20, 0x04	; 4
	
	for(long i = 0 ; i < 10000 ; i++);
	
	PORTA = 0b00001000;
  74:	38 e0       	ldi	r19, 0x08	; 8
	
	for(long i = 0 ; i < 10000 ; i++);
	
	PORTA = 0b00010000;
  76:	20 e1       	ldi	r18, 0x10	; 16
int main(void)
{
    /* Replace with your application code */
	
	while(1){
	DDRA = 0b00011111; 
  78:	7a bb       	out	0x1a, r23	; 26
	PORTA = 0b00000001;
  7a:	6b bb       	out	0x1b, r22	; 27
  7c:	80 e0       	ldi	r24, 0x00	; 0
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	01 96       	adiw	r24, 0x01	; 1
	
	for(long i = 0 ; i < 10000 ; i++);
  82:	80 31       	cpi	r24, 0x10	; 16
  84:	e7 e2       	ldi	r30, 0x27	; 39
  86:	9e 07       	cpc	r25, r30
  88:	d9 f7       	brne	.-10     	; 0x80 <main+0x14>
	
	PORTA = 0b00000010; 
  8a:	5b bb       	out	0x1b, r21	; 27
  8c:	80 e0       	ldi	r24, 0x00	; 0
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	01 96       	adiw	r24, 0x01	; 1
	
	for(long i = 0 ; i < 10000 ; i++);
  92:	80 31       	cpi	r24, 0x10	; 16
  94:	e7 e2       	ldi	r30, 0x27	; 39
  96:	9e 07       	cpc	r25, r30
  98:	d9 f7       	brne	.-10     	; 0x90 <main+0x24>
	
	PORTA = 0b00000100;
  9a:	4b bb       	out	0x1b, r20	; 27
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	01 96       	adiw	r24, 0x01	; 1
	
	for(long i = 0 ; i < 10000 ; i++);
  a2:	80 31       	cpi	r24, 0x10	; 16
  a4:	e7 e2       	ldi	r30, 0x27	; 39
  a6:	9e 07       	cpc	r25, r30
  a8:	d9 f7       	brne	.-10     	; 0xa0 <main+0x34>
	
	PORTA = 0b00001000;
  aa:	3b bb       	out	0x1b, r19	; 27
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	01 96       	adiw	r24, 0x01	; 1
	
	for(long i = 0 ; i < 10000 ; i++);
  b2:	80 31       	cpi	r24, 0x10	; 16
  b4:	e7 e2       	ldi	r30, 0x27	; 39
  b6:	9e 07       	cpc	r25, r30
  b8:	d9 f7       	brne	.-10     	; 0xb0 <main+0x44>
	
	PORTA = 0b00010000;
  ba:	2b bb       	out	0x1b, r18	; 27
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	01 96       	adiw	r24, 0x01	; 1
	
	for(long i = 0 ; i < 10000 ; i++);
  c2:	80 31       	cpi	r24, 0x10	; 16
  c4:	e7 e2       	ldi	r30, 0x27	; 39
  c6:	9e 07       	cpc	r25, r30
  c8:	b9 f2       	breq	.-82     	; 0x78 <main+0xc>
  ca:	fa cf       	rjmp	.-12     	; 0xc0 <main+0x54>

000000cc <_exit>:
  cc:	f8 94       	cli

000000ce <__stop_program>:
  ce:	ff cf       	rjmp	.-2      	; 0xce <__stop_program>
